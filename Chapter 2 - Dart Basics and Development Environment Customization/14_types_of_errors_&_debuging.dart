void main(List<String> args) {
  

  // What are errors and bugs in programming?

  /*

    Errors or bugs in programming refer to issues or defects in the code that cause it to behave unexpectedly or produce incorrect results. They can occur due to various reasons, including mistakes in the code logic, syntax errors, incorrect data handling, or external factors.

    Errors can manifest in different forms and impact the functionality, performance, or user experience of the software. Some common types of errors include:

    1. Syntax Errors
    2. Logical Errors
    3. Runtime Errors

  */

  // 1. syntax Errors
  /*
    These errors occur when the code violates the syntax rules of the programming language. It could be a missing or misplaced symbol, incorrect keyword usage, or improper punctuation. Syntax errors are typically detected by the compiler or interpreter during the compilation process and prevent the code from running. 
  */

  // Print("Hello World!"); // here our syntax is wrong


  
  // 2. Logical Error

  /* Logical errors are defects in the code logic or algorithm that lead to incorrect program behavior. These errors do not result in immediate crashes or error messages but cause the code to produce incorrect or unexpected results. Logical errors can be challenging to identify and require careful analysis and debugging. */


  // for example : if we want to add to numbers but we mistakenly subtract these numbers: This is logical error
  // in Logical Errors our syntax is correct but logic is in correct.

  // write a program to add two numbers 
  print(10 - 10); // here we mistakenly subtract these two numbers whereas we instructed to add them.  



  // 3. Runtime Errors

  /* Runtime Errors: Also known as exceptions, runtime errors occur during the execution of the code. They can happen due to various reasons, such as dividing a number by zero, accessing an invalid array index, or calling a function with incorrect arguments. Runtime errors cause the program to terminate abruptly and may display error messages or exception stack traces.*/

  print(10/0);



  /* Bugs are the manifestation of errors in software. They can range from minor issues that have minimal impact to critical defects that severely affect the functioning of the software. Bugs can arise from various sources, including coding errors, design flaws, compatibility issues, environmental factors, or inadequate testing.

  Detecting and fixing errors and bugs is an essential part of the software development process. Developers use various debugging techniques and practices to identify, isolate, and resolve these issues, ensuring that the software functions correctly and meets the desired requirements. */


  // What is Debugging?

  /*  Debugging is the process of finding and fixing errors or bugs in your code. It involves identifying the root cause of the issue and making the necessary corrections to ensure the code functions as intended. Debugging techniques include:

  a. Printing: Inserting print statements in your code to display variable values, execution flow, or any other relevant information for troubleshooting.

  b. Debugging Tools: Integrated Development Environments (IDEs) like Visual Studio Code provide debugging tools that allow you to set breakpoints, step through the code, inspect variables, and analyze the program's behavior during runtime.

  c. Code Review: Seeking assistance from peers or conducting code reviews to get fresh perspectives and identify potential errors or improvements.

  d. Analyzing Error Messages: Understanding the error messages generated by the compiler or interpreter can provide valuable clues about the type and location of the error.

  e. Testing: Writing and running test cases to verify the expected behavior of your code and identify any deviations or anomalies.  */



  /*  It's important to note that errors are an inherent part of the programming process, even for experienced developers. Effective debugging techniques and practices help minimize the occurrence of errors and ensure the code performs as expected.  */


}